TODO

For optimization purposes, a switch/branch-table construct would be helpful
Note that WASM's br_table requires keeping track of parent block labels, which requires context not currently available to the generator. Switches where every case ends in return/break are usually compiled to if/else chains anyway

We should also create a VSCode language server that provides realtime analysis and validation. Take a look at textdiff-create on NPM for generating diffs to apply formatting

Exports and imports
    Imports require definition of type signatures
    Have two different import syntaxes; explicit (with type signatures spelled out) and implicit (resolved at compile time)
    Note that only _immutable_ globals (constants) can be imported/exported
    Also have both whole-module imports (import bar) and named imports (from bar import Foo)
    Aliasing should also be possible: (import bar as bar), (from bar import void Foo() as Foobar), (export Foo as Bar)

Pointers/Memory access
    There are load/store functions included in the type namespaces (i.e. int.load()) but the preferred form of memory access is mapping
	Mapping a struct to an address creates a psuedo-global variable which instead of being backed by actual global variable(s) is instead converted into load/store operations relative to the specified mapping offset
	In the future if we have struct initialization, those values should be filled at instantiation time via the WASM Data section

Arrays
	Arrays still need to be added
    They should be similar to structs; always fixed-size, let user code keep a dynamic length separately if desired
	Arrays are a lot trickier than they look. To use them as parameters/locals, we need to know the index at compile time because the argument to get_local is an immediate, not a stack value. For mapped array accesses, we need to somehow thread the indexing stack value to the generated load/store ops, multiply it by the array type's size, and add it to the computed offset.
	To use arrays as locals/globals we could generate branch-tables that get/set the appropriate local/global using the computed index

Structs
	For locals/globals, they are allocated as suffixed properties (e.g. v: { x, y } becomes "v.x", "v.y") and use scope trickery to control access
    For memory-mapped use, they generate loads/stores which use static offsets from the struct's mapped address
	We can potentially include byte and short types in the future, if we use i32 as backing and truncate when needed when performing operations
	This would of course be more expensive than just using plain ints
	For now, the load/store functions provide support for 8-bit and 16-bit numbers
	Structs may include any primitives, structs, or fixed-length arrays of primitive or struct values
	Warnings should be added if the struct properties are not access-aligned (shorts every 2 bytes, ints every 4 bytes, etc.)
	Note that structs that are aligned on their own may become misaligned when used as part of an array or other struct